---
- name: for {{ansible_hostname}} || check for old reboot is needed
  stat: path=/var/run/reboot-required
  register: file_reboot_before

- name: Handle the Note for User if reboot required
  block:
    - debug:
        msg:
        - "There is the possibility that an older reboot is already necessary for {{ansible_hostname}}"
        - "This is needed to process all updates and upgrades of the system."
        when: file_reboot_before.stat.islnk is defined
  when: file_reboot_before.stat.islnk is defined

- name: for {{ansible_hostname}} || Update packages to latest versions on {{ansible_hostname}}
  apt:
    update_cache: yes
    autoclean: yes
    autoremove: yes
    cache_valid_time: 86400
    force_apt_get: yes
  changed_when: 0

- name: for {{ansible_hostname}} || get list of pending upgrades 
  command: apt-get --simulate dist-upgrade
  args:
    warn: false
  register: apt_simulate
  changed_when: 0

- name: for {{ansible_hostname}} || parse apt-get output to get list of changed packages
  set_fact:
    updates: '{{ apt_simulate.stdout_lines | select("match", "^Inst ") | list  | sort }}'
  changed_when: 0

- name: for {{ansible_hostname}} || show pending updates 
  debug:
    var: updates
  when: updates.0 is defined

- pause:
    seconds: 10

- name: for {{ansible_hostname}} || autoremove unused packages 
  command: apt-get -y autoremove
  args:
    warn: false
  when: '"Inst linux-image-" in apt_simulate.stdout'
  changed_when: 0

- name: for {{ansible_hostname}} || Upgrade Distrubution to the latest stable version 
  apt:
    upgrade: dist
    state: present
    force_apt_get: yes
  register: apt_simulate
 
- name: for {{ansible_hostname}} || Check folder log exists
  stat:
    path: '/var/log/upgrades/{{ansible_hostname}}'
  register: logfol

- name: for {{ansible_hostname}} || Create log Folder
  file: 'path={{item}} state=directory mode=0777'
  with_items:
    - '/var/log/upgrades/{{ ansible_hostname }}'
  when: logfol.stat.exists == False
  ignore_errors: yes

- name: for {{ansible_hostname}} || Create log directory 
  file:
    path: '/var/log/upgrades/{{ ansible_hostname }}'
    state: directory

- name: Get a timestamp
  command: date +%Y-%m-%d-%H:%M:%S
  register: timestamp

- name: for {{ansible_hostname}} || Write changes to logfile
  copy:
    content: "{{ apt_simulate.stdout }}"
    dest: "/var/log/upgrades/{{ ansible_hostname }}/{{ansible_hostname}}-{{timestamp.stdout}}.log"

- debug:
    msg:
    - 
    - "log file is allocated in /var/log/upgrades/{{ ansible_hostname }}"
    - 
    - "Of course with time stamp in the log file"
    - 
    - "please use the correct folder to see what the updater has done"
    - 
- pause:
    seconds: 5

- name: for {{ansible_hostname}} || Install a list of packages  
  apt:
    name: "{{ packages }}"
    state: latest
    update_cache: yes
    allow_unauthenticated: yes
    force_apt_get: yes
    force: yes
  vars:
    packages:
    - ctop
    - dnsutils
    - software-properties-common
    - sysstat
    - nmon
    - fortune
    - fortune-mod
    - fortunes-bofh-excuses
    - figlet
    - lolcat

- name: for {{ansible_hostname}} || Replace false to true in systat 
  lineinfile:
    path: /etc/default/sysstat
    regexp: '^ENABLED='
    line: ENABLED=true

- name: for {{ansible_hostname}} || remove | cowsay 
  apt:
    name: "{{ packages }}"
    state: absent
    force_apt_get: yes
    force: yes
  vars:
    packages:
    - cowsay
    - nodejs

- name: for {{ansible_hostname}} || Ensure systat is ENABLED=true 
  lineinfile:
    path: /etc/default/sysstat
    regexp: '^ENABLED='
    line: ENABLED=true

- name: for {{ansible_hostname}} || Remove useless packages from the cache 
  apt:
    update_cache: yes
    autoclean: yes
    autoremove: yes
    force_apt_get: yes

- name: for {{ansible_hostname}} || Fix filled /boot 
  shell:  dpkg -l linux-{image,headers}-"[0-9]*" | awk '/^ii/{ print $2}' | grep -v -e `uname -r | cut -f1,2 -d"-"` | grep -e '[0-9]' | xargs sudo apt-get -y purge

- name: for {{ansible_hostname}} || Update APT package cache 
  apt: update_cache=yes cache_valid_time=600 force_apt_get=yes

- name: for {{ansible_hostname}} || Autoremove unused packages 
  command: apt-get -y autoremove
  register: apt_remove
  changed_when: "'packages will be REMOVED' in apt_remove.stdout"

- name: for {{ansible_hostname}} || Purge residual kernel packages 
  shell: apt-get remove -y --purge $(dpkg -l | grep "^rc\s*linux-image-" | awk '{print $2}' | tr '\n' ' ')
  register: apt_kernel
  changed_when: "'packages will be REMOVED' in apt_kernel.stdout"

- name: for {{ansible_hostname}} || check if reboot needed 
  stat: path=/var/run/reboot-required
  register: file_reboot_required

- name: Handle the Note for User if reboot required
  block:
    - debug:
        msg:
        - "It is necessary for {{ansible_hostname}}"
        - "This is needed to process all updates and upgrades of the system."
  when: file_reboot_requiredstat.islnk is defined
