#!/bin/bash
#
# Title:      PGBlitz (Reference Title File)
# Author(s):  Admin9705 - Deiteq
# URL:        https://pgblitz.com - http://github.pgblitz.com
# GNU:        General Public License v3.0
################################################################################
---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Register Domain
      shell: 'cat /var/plexguide/server.domain'
      register: domain
      ignore_errors: True

    - name: Register IP
      shell: 'cat /var/plexguide/server.ip'
      register: ipaddress
      ignore_errors: True

    - name: Register Ports
      shell: 'cat /var/plexguide/server.ports'
      register: ports
      ignore_errors: True

    - name: Register HD Path
      shell: 'cat /var/plexguide/server.hd.path'
      register: path
      ignore_errors: True

    - name: Register HD Path
      shell: 'cat /var/plexguide/server.hd.path'
      register: path
      ignore_errors: True

    - name: Register Auth Path
      shell: 'cat /var/plexguide/server.ht'
      register: auth
      ignore_errors: True

    - name: Logging Ansible Role Information
      shell: "echo 'INFO - Ansible Role Folders Started' > /var/plexguide/logs/pg.log && bash /opt/plexguide/menu/log/log.sh"

    ############ GCrypt
    - name: GCrypt Check
      stat:
        path: '/mnt/gcrypt'
      register: gcrypt

    - name: Create GCrypt Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/mnt/gcrypt/tv'
        - '/mnt/gcrypt/movies'
      when: gcrypt.stat.exists == False
      ignore_errors: yes
    ############ TCrypt
    - name: TCrypt Check
      stat:
        path: '/mnt/tcrypt'
      register: tcrypt

    - name: Create TCrypt Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/mnt/tcrypt/tv'
        - '/mnt/tcrypt/movies'
      when: tcrypt.stat.exists == False
      ignore_errors: yes

    ############ Personal Containers Folder
    - name: MyContainers Check
      stat:
        path: /opt/mycontainers
      register: mycontainers

    - name: Create MyContainers Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/opt/mycontainers'
        - '/opt/mycontainers/apps'
      when: mycontainers.stat.exists == False
      ignore_errors: yes

    ############ PGUnion
    - name: Union Check
      stat:
        path: '/mnt/unionfs'
      register: pgunion

    - name: Create Union Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/mnt/unionfs'
      when: pgunion.stat.exists == False
      ignore_errors: yes

    ############ TMP
    - name: TMP Check
      stat:
        path: '/mnt/tmp'
      register: tmp

    - name: Create Temp Folder
      file: 'path={{item}} state=directory'
      with_items:
        - '/mnt/tmp'
      when: tmp.stat.exists == False
      ignore_errors: yes

    ############ GDrive
    - name: GDrive Check
      stat:
        path: '/mnt/gdrive'
      register: gdrive

    - name: Create GDrive Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/mnt/gdrive'
        - '/mnt/gdrive/tv'
        - '/mnt/gdrive/movies'
      when: gdrive.stat.exists == False
      ignore_errors: yes
    ############ TCrypt
    - name: Create TCrypt Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/mnt/tcrypt'
        - '/mnt/tcrypt/tv'
        - '/mnt/tcrypt/movies'
      when: gdrive.stat.exists == False
      ignore_errors: yes

    ############ TDrive
    - name: TDrive Check
      stat:
        path: '/mnt/tdrive'
      register: tdrive

    - name: Create TDrive Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/mnt/tdrive'
        - '/mnt/tdrive/tv'
        - '/mnt/tdrive/movies'
      when: tdrive.stat.exists == False
      ignore_errors: yes

    ############ Encrypt
    - name: Encrypt Check
      stat:
        path: '/mnt/encrypt'
      register: encrypt

    - name: Create Encrypt Folders
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000'
      with_items:
        - '/mnt/encrypt/tv'
        - '/mnt/encrypt/movies'
      when: encrypt.stat.exists == False
      ignore_errors: yes

    - name: Create Basic Directories
      file: 'path={{item}} state=directory mode=0775 owner=1000 group=1000 recurse=true'
      with_items:
        - '/opt/appdata/plexguide'
        - '/opt/appdata/plexguide/emergency'
        - '/opt/communityapps'
        - '/opt/communityapps/apps'
        - '/opt/coreapps'
        - '/opt/coreapps/apps'
        - '/opt/pgshield'
        - '/var/plexguide'
        - '/mnt/move'
        - '/mnt/backup'
        - '/opt/appdata/plexguide/keys/unprocessed'
        - '/opt/appdata/plexguide/keys/processed'
        - '/opt/appdata/plexguide/keys/badjson'
        - '{{path.stdout}}/downloads'
        - '{{path.stdout}}/nzb'
        - '{{path.stdout}}/torrent'
        - '{{path.stdout}}/move'
        - '/var/plexguide/logs'
        - '/var/plexguide/logs/drive'
        - '/var/plexguide/logs/emergency'
        - '/var/plexguide/logs/uploader'
        - '/opt/plexguide/roles/log'
      ignore_errors: yes
